// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/users.proto

package usersv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/finebiscuit/proto/biscuit/users/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UsersName is the fully-qualified name of the Users service.
	UsersName = "biscuit.users.v1.Users"
)

// UsersClient is a client for the biscuit.users.v1.Users service.
type UsersClient interface {
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error)
}

// NewUsersClient constructs a client for the biscuit.users.v1.Users service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UsersClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersClient{
		signUp: connect_go.NewClient[v1.SignUpRequest, v1.SignUpResponse](
			httpClient,
			baseURL+"/biscuit.users.v1.Users/SignUp",
			opts...,
		),
		createSession: connect_go.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+"/biscuit.users.v1.Users/CreateSession",
			opts...,
		),
		getAccessToken: connect_go.NewClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse](
			httpClient,
			baseURL+"/biscuit.users.v1.Users/GetAccessToken",
			opts...,
		),
	}
}

// usersClient implements UsersClient.
type usersClient struct {
	signUp         *connect_go.Client[v1.SignUpRequest, v1.SignUpResponse]
	createSession  *connect_go.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	getAccessToken *connect_go.Client[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]
}

// SignUp calls biscuit.users.v1.Users.SignUp.
func (c *usersClient) SignUp(ctx context.Context, req *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// CreateSession calls biscuit.users.v1.Users.CreateSession.
func (c *usersClient) CreateSession(ctx context.Context, req *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// GetAccessToken calls biscuit.users.v1.Users.GetAccessToken.
func (c *usersClient) GetAccessToken(ctx context.Context, req *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error) {
	return c.getAccessToken.CallUnary(ctx, req)
}

// UsersHandler is an implementation of the biscuit.users.v1.Users service.
type UsersHandler interface {
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error)
}

// NewUsersHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersHandler(svc UsersHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/biscuit.users.v1.Users/SignUp", connect_go.NewUnaryHandler(
		"/biscuit.users.v1.Users/SignUp",
		svc.SignUp,
		opts...,
	))
	mux.Handle("/biscuit.users.v1.Users/CreateSession", connect_go.NewUnaryHandler(
		"/biscuit.users.v1.Users/CreateSession",
		svc.CreateSession,
		opts...,
	))
	mux.Handle("/biscuit.users.v1.Users/GetAccessToken", connect_go.NewUnaryHandler(
		"/biscuit.users.v1.Users/GetAccessToken",
		svc.GetAccessToken,
		opts...,
	))
	return "/biscuit.users.v1.Users/", mux
}

// UnimplementedUsersHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersHandler struct{}

func (UnimplementedUsersHandler) SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.users.v1.Users.SignUp is not implemented"))
}

func (UnimplementedUsersHandler) CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.users.v1.Users.CreateSession is not implemented"))
}

func (UnimplementedUsersHandler) GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.users.v1.Users.GetAccessToken is not implemented"))
}
