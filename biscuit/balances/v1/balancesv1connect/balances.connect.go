// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: balances/v1/balances.proto

package balancesv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/finebiscuit/proto/biscuit/balances/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BalancesName is the fully-qualified name of the Balances service.
	BalancesName = "biscuit.balances.v1.Balances"
)

// BalancesClient is a client for the biscuit.balances.v1.Balances service.
type BalancesClient interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	UpsertEntry(context.Context, *connect_go.Request[v1.UpsertEntryRequest]) (*connect_go.Response[v1.UpsertEntryResponse], error)
}

// NewBalancesClient constructs a client for the biscuit.balances.v1.Balances service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBalancesClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BalancesClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &balancesClient{
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/biscuit.balances.v1.Balances/List",
			opts...,
		),
		get: connect_go.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+"/biscuit.balances.v1.Balances/Get",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/biscuit.balances.v1.Balances/Create",
			opts...,
		),
		upsertEntry: connect_go.NewClient[v1.UpsertEntryRequest, v1.UpsertEntryResponse](
			httpClient,
			baseURL+"/biscuit.balances.v1.Balances/UpsertEntry",
			opts...,
		),
	}
}

// balancesClient implements BalancesClient.
type balancesClient struct {
	list        *connect_go.Client[v1.ListRequest, v1.ListResponse]
	get         *connect_go.Client[v1.GetRequest, v1.GetResponse]
	create      *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	upsertEntry *connect_go.Client[v1.UpsertEntryRequest, v1.UpsertEntryResponse]
}

// List calls biscuit.balances.v1.Balances.List.
func (c *balancesClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls biscuit.balances.v1.Balances.Get.
func (c *balancesClient) Get(ctx context.Context, req *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls biscuit.balances.v1.Balances.Create.
func (c *balancesClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// UpsertEntry calls biscuit.balances.v1.Balances.UpsertEntry.
func (c *balancesClient) UpsertEntry(ctx context.Context, req *connect_go.Request[v1.UpsertEntryRequest]) (*connect_go.Response[v1.UpsertEntryResponse], error) {
	return c.upsertEntry.CallUnary(ctx, req)
}

// BalancesHandler is an implementation of the biscuit.balances.v1.Balances service.
type BalancesHandler interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	UpsertEntry(context.Context, *connect_go.Request[v1.UpsertEntryRequest]) (*connect_go.Response[v1.UpsertEntryResponse], error)
}

// NewBalancesHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBalancesHandler(svc BalancesHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/biscuit.balances.v1.Balances/List", connect_go.NewUnaryHandler(
		"/biscuit.balances.v1.Balances/List",
		svc.List,
		opts...,
	))
	mux.Handle("/biscuit.balances.v1.Balances/Get", connect_go.NewUnaryHandler(
		"/biscuit.balances.v1.Balances/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/biscuit.balances.v1.Balances/Create", connect_go.NewUnaryHandler(
		"/biscuit.balances.v1.Balances/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/biscuit.balances.v1.Balances/UpsertEntry", connect_go.NewUnaryHandler(
		"/biscuit.balances.v1.Balances/UpsertEntry",
		svc.UpsertEntry,
		opts...,
	))
	return "/biscuit.balances.v1.Balances/", mux
}

// UnimplementedBalancesHandler returns CodeUnimplemented from all methods.
type UnimplementedBalancesHandler struct{}

func (UnimplementedBalancesHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.balances.v1.Balances.List is not implemented"))
}

func (UnimplementedBalancesHandler) Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.balances.v1.Balances.Get is not implemented"))
}

func (UnimplementedBalancesHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.balances.v1.Balances.Create is not implemented"))
}

func (UnimplementedBalancesHandler) UpsertEntry(context.Context, *connect_go.Request[v1.UpsertEntryRequest]) (*connect_go.Response[v1.UpsertEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.balances.v1.Balances.UpsertEntry is not implemented"))
}
