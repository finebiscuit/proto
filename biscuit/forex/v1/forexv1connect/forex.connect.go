// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: forex/v1/forex.proto

package forexv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/finebiscuit/proto/biscuit/forex/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ForexName is the fully-qualified name of the Forex service.
	ForexName = "biscuit.forex.v1.Forex"
)

// ForexClient is a client for the biscuit.forex.v1.Forex service.
type ForexClient interface {
	GetRate(context.Context, *connect_go.Request[v1.GetRateRequest]) (*connect_go.Response[v1.GetRateResponse], error)
	ListRates(context.Context, *connect_go.Request[v1.ListRatesRequest]) (*connect_go.Response[v1.ListRatesResponse], error)
}

// NewForexClient constructs a client for the biscuit.forex.v1.Forex service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewForexClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ForexClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &forexClient{
		getRate: connect_go.NewClient[v1.GetRateRequest, v1.GetRateResponse](
			httpClient,
			baseURL+"/biscuit.forex.v1.Forex/GetRate",
			opts...,
		),
		listRates: connect_go.NewClient[v1.ListRatesRequest, v1.ListRatesResponse](
			httpClient,
			baseURL+"/biscuit.forex.v1.Forex/ListRates",
			opts...,
		),
	}
}

// forexClient implements ForexClient.
type forexClient struct {
	getRate   *connect_go.Client[v1.GetRateRequest, v1.GetRateResponse]
	listRates *connect_go.Client[v1.ListRatesRequest, v1.ListRatesResponse]
}

// GetRate calls biscuit.forex.v1.Forex.GetRate.
func (c *forexClient) GetRate(ctx context.Context, req *connect_go.Request[v1.GetRateRequest]) (*connect_go.Response[v1.GetRateResponse], error) {
	return c.getRate.CallUnary(ctx, req)
}

// ListRates calls biscuit.forex.v1.Forex.ListRates.
func (c *forexClient) ListRates(ctx context.Context, req *connect_go.Request[v1.ListRatesRequest]) (*connect_go.Response[v1.ListRatesResponse], error) {
	return c.listRates.CallUnary(ctx, req)
}

// ForexHandler is an implementation of the biscuit.forex.v1.Forex service.
type ForexHandler interface {
	GetRate(context.Context, *connect_go.Request[v1.GetRateRequest]) (*connect_go.Response[v1.GetRateResponse], error)
	ListRates(context.Context, *connect_go.Request[v1.ListRatesRequest]) (*connect_go.Response[v1.ListRatesResponse], error)
}

// NewForexHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewForexHandler(svc ForexHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/biscuit.forex.v1.Forex/GetRate", connect_go.NewUnaryHandler(
		"/biscuit.forex.v1.Forex/GetRate",
		svc.GetRate,
		opts...,
	))
	mux.Handle("/biscuit.forex.v1.Forex/ListRates", connect_go.NewUnaryHandler(
		"/biscuit.forex.v1.Forex/ListRates",
		svc.ListRates,
		opts...,
	))
	return "/biscuit.forex.v1.Forex/", mux
}

// UnimplementedForexHandler returns CodeUnimplemented from all methods.
type UnimplementedForexHandler struct{}

func (UnimplementedForexHandler) GetRate(context.Context, *connect_go.Request[v1.GetRateRequest]) (*connect_go.Response[v1.GetRateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.forex.v1.Forex.GetRate is not implemented"))
}

func (UnimplementedForexHandler) ListRates(context.Context, *connect_go.Request[v1.ListRatesRequest]) (*connect_go.Response[v1.ListRatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.forex.v1.Forex.ListRates is not implemented"))
}
