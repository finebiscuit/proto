// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/finebiscuit/proto/biscuit/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthName is the fully-qualified name of the Auth service.
	AuthName = "biscuit.auth.v1.Auth"
)

// AuthClient is a client for the biscuit.auth.v1.Auth service.
type AuthClient interface {
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error)
	VerifyAccessToken(context.Context, *connect_go.Request[v1.VerifyAccessTokenRequest]) (*connect_go.Response[v1.VerifyAccessTokenResponse], error)
}

// NewAuthClient constructs a client for the biscuit.auth.v1.Auth service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authClient{
		signUp: connect_go.NewClient[v1.SignUpRequest, v1.SignUpResponse](
			httpClient,
			baseURL+"/biscuit.auth.v1.Auth/SignUp",
			opts...,
		),
		createSession: connect_go.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+"/biscuit.auth.v1.Auth/CreateSession",
			opts...,
		),
		getAccessToken: connect_go.NewClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse](
			httpClient,
			baseURL+"/biscuit.auth.v1.Auth/GetAccessToken",
			opts...,
		),
		verifyAccessToken: connect_go.NewClient[v1.VerifyAccessTokenRequest, v1.VerifyAccessTokenResponse](
			httpClient,
			baseURL+"/biscuit.auth.v1.Auth/VerifyAccessToken",
			opts...,
		),
	}
}

// authClient implements AuthClient.
type authClient struct {
	signUp            *connect_go.Client[v1.SignUpRequest, v1.SignUpResponse]
	createSession     *connect_go.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	getAccessToken    *connect_go.Client[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]
	verifyAccessToken *connect_go.Client[v1.VerifyAccessTokenRequest, v1.VerifyAccessTokenResponse]
}

// SignUp calls biscuit.auth.v1.Auth.SignUp.
func (c *authClient) SignUp(ctx context.Context, req *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// CreateSession calls biscuit.auth.v1.Auth.CreateSession.
func (c *authClient) CreateSession(ctx context.Context, req *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// GetAccessToken calls biscuit.auth.v1.Auth.GetAccessToken.
func (c *authClient) GetAccessToken(ctx context.Context, req *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error) {
	return c.getAccessToken.CallUnary(ctx, req)
}

// VerifyAccessToken calls biscuit.auth.v1.Auth.VerifyAccessToken.
func (c *authClient) VerifyAccessToken(ctx context.Context, req *connect_go.Request[v1.VerifyAccessTokenRequest]) (*connect_go.Response[v1.VerifyAccessTokenResponse], error) {
	return c.verifyAccessToken.CallUnary(ctx, req)
}

// AuthHandler is an implementation of the biscuit.auth.v1.Auth service.
type AuthHandler interface {
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error)
	VerifyAccessToken(context.Context, *connect_go.Request[v1.VerifyAccessTokenRequest]) (*connect_go.Response[v1.VerifyAccessTokenResponse], error)
}

// NewAuthHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthHandler(svc AuthHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/biscuit.auth.v1.Auth/SignUp", connect_go.NewUnaryHandler(
		"/biscuit.auth.v1.Auth/SignUp",
		svc.SignUp,
		opts...,
	))
	mux.Handle("/biscuit.auth.v1.Auth/CreateSession", connect_go.NewUnaryHandler(
		"/biscuit.auth.v1.Auth/CreateSession",
		svc.CreateSession,
		opts...,
	))
	mux.Handle("/biscuit.auth.v1.Auth/GetAccessToken", connect_go.NewUnaryHandler(
		"/biscuit.auth.v1.Auth/GetAccessToken",
		svc.GetAccessToken,
		opts...,
	))
	mux.Handle("/biscuit.auth.v1.Auth/VerifyAccessToken", connect_go.NewUnaryHandler(
		"/biscuit.auth.v1.Auth/VerifyAccessToken",
		svc.VerifyAccessToken,
		opts...,
	))
	return "/biscuit.auth.v1.Auth/", mux
}

// UnimplementedAuthHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthHandler struct{}

func (UnimplementedAuthHandler) SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.auth.v1.Auth.SignUp is not implemented"))
}

func (UnimplementedAuthHandler) CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.auth.v1.Auth.CreateSession is not implemented"))
}

func (UnimplementedAuthHandler) GetAccessToken(context.Context, *connect_go.Request[v1.GetAccessTokenRequest]) (*connect_go.Response[v1.GetAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.auth.v1.Auth.GetAccessToken is not implemented"))
}

func (UnimplementedAuthHandler) VerifyAccessToken(context.Context, *connect_go.Request[v1.VerifyAccessTokenRequest]) (*connect_go.Response[v1.VerifyAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biscuit.auth.v1.Auth.VerifyAccessToken is not implemented"))
}
